                                                               Day-3-content 
l=[1,4,7.4,"sam"]

i/p:l[3]
o/p:'sam'

i/p:l[2:3]
o/p:[7.4]

i/p:l[2:4]
o/p:[7.4, 'sam']

i/p:l[0:]
o/p:[1, 4, 7.4, 'sam']

i/p:l[:3]
o/p:[1, 4, 7.4]

i/p:l[-1]
o/p:'sam'

i/p:l[::-1]
o/p:['sam', 7.4, 4, 1]

****append():add the elements at the end of the list
extend():add all elements of list to another
insert():inserts elements at particular position
remove():removes the item from list
pop():removes and returns elements
clear():removes all elements
index():return the index of 1st matched item
count():returns the count of aruguments passed
sort():sorts the list in ascending order
reverse():reverse the list
copy():copies the list
l=[1,3,5,7,9]
len(l)
5
l.count(2)
0
l.count(1)
1
l.append(10)
l
[1, 3, 5, 7, 9, 10]
l.extend([2,4,6,8])
l
[1, 3, 5, 7, 9, 10, 2, 4, 6, 8]
l.sort()
l
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l.insert(0,4)
l
[4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l.pop(1,4)
l.pop()
10
l.remove(2)
l
[4, 1, 3, 4, 5, 6, 7, 8, 9]
l.reverse()
l
[9, 8, 7, 6, 5, 4, 3, 1, 4]
l.index()
3
l.copy()
[9, 8, 7, 6, 5, 4, 3, 1, 4]
l.clear()
l
[]

****set={}
s1|s2 union......s1.union(s2)
s1&s2 intersect....s1.intersect(s2)
s1-s2 difference...s1.difference(s2)
In set if we want to add element then use update..
for adding more than one element we use same update
for deleting we use discard.
s={1,2,3,4}
s.update([20,40])
s
{1, 2, 3, 4, 40, 20}
s.discard(40)
s
{1, 2, 3, 4, 20}
s1={1,2,3}
s2={4,5,6,7}
s1|s2
{1, 2, 3, 4, 5, 6, 7}
s1&s2
set()
s1-s2
{1, 2, 3}
#superset
s={1,2,3}
s1={1,2,3,4,5,6}
s1.issuperset(s)
True
#symmetric difference
s1={1,2,3,4,5,10}
s2={4,1,9,2,10}
s1^s2
{3,5,9}
or we can also do like
print(s1.symmetric _difference(s2))
{3,5,9}

****Tuple(ordered):()
ordered,unchangable,can't include items.
can fetch using t[index]
methods---count and index
t=(4,3,4,9.6,"ice cream")
type(t)
<class 'tuple'>
t.count(4)
2
t.index(4)
0

****Dictionary
dictionary contains element with two units keys and values ....keys must be unique.
d={1:"one",2:"two"}
d
{1: 'one', 2: 'two'}
type(d)
<class 'dict'>
d.keys()
dict_keys([1, 2])
d.values()
dict_values(['one', 'two'])
d.items()
dict_items([(1, 'one'), (2, 'two')])
d={'anu':'techno','pragati':'college'}
type(d)
<class 'dict'>
d.keys()
dict_keys(['anu', 'pragati'])
d.values()
dict_values(['techno', 'college'])
d.items()
dict_items([('anu', 'techno'), ('pragati', 'college')])
l=['hi','hello']
dict.fromkeys(l)
{'hi': None, 'hello': None}
dict.fromkeys(l,50)
{'hi': 50, 'hello': 50}
s=dict.fromkeys(l,100)
s
{'hi': 100, 'hello': 100}

d.items-returns all pairs
d.update({'c':89})----add one or more items 
d.pop('b') --- fetch and remove item
 d.popitem() - fetch and remove recently added
item
 d.setdefault('angel',700) - if the key is not in dic - wll be added or nothing will be done
d={1:'a',2:'c'}
d.setdefault(3,d) 
Now print d 3,d will be added
Note:
Value is optional d.setdefault(2) is valid